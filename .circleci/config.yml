# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:11.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Build
          command: mvn -B -DskipTests clean package
      # Then run your tests!
      - run:
          name: Test
          command: mvn test
  aws-cli-example:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: example
      - run: echo "Run your code here"
#  aws-deploy:
#    docker:
#      - image: cimg/python:3.10.2
#    steps:
#      # Checkout the code as the first step.
#      - checkout
#      - run:
#          name: Deploy
#          command: |
#            # 1- Install AWS CLI
#            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
#            unzip awscli-bundle.zip
#            ./awscli-bundle/install -b ~/bin/aws
#            # 2- Get the public IP of the current CircleCI runner
#            PUBLIC_IP=$(curl ipinfo.io/ip)
#            # 3- Get AWS Region# TODO Don't forget to replcae by your own Region
#            AWS_REGION=us-west-2
#            # 4- Get SG ID# TODO Don't forget to replace by your own SG ID
#            SG_ID=sg-testing
#            # 5- Add an ingress rule to the security group
#            ~/bin/aws ec2 authorize-security-group-ingress --region $AWS_REGION --group-id $SG_ID \
#              --protocol tcp --port 22 --cidr $PUBLIC_IP/24
#            # 6- Give the ingress rule some time to propogate
#            sleep 5
#            # 7- SSH to the server to deploy
#            # TODO Change to your username
#            EC2_USERNAME=ec2-user
#            # TODO Change to your server's URL or public IP
#            ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$TEXT_RECOGNITION_SVR
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
      - aws-cli-example
